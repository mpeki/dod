apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'org.asciidoctor.jvm.convert'
apply plugin: "com.gorylenko.gradle-git-properties"

group 'dk.pekilidi'
sourceCompatibility = '17'

configurations {
    asciidoctorExt
}

//ext['spring-restdocs.version'] = '2.0.6.BUILD-SNAPSHOT'
dependencies {

    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'io.hypersistence:hypersistence-utils-hibernate-60:3.3.1'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.liquibase:liquibase-core'
//    implementation 'org.springframework.retry:spring-retry:2.0.0'
    //https://mvnrepository.com/artifact/org.springframework/spring-aspects
//    implementation 'org.springframework:spring-aspects:6.0.7'
//    implementation 'org.springframework:spring-core:5.3.23'

//    implementation 'org.drools:drools-core:8.36.0.Final'
    implementation "org.drools:drools-engine:${droolsVersion}"
    implementation "org.drools:drools-mvel:${droolsVersion}"
//    implementation 'org.drools:drools-model-compiler:8.37.0.Final'
//    implementation 'org.drools:drools-mvel:8.29.0.Final'
//    implementation 'org.kie:kie-spring:7.73.0.Final'
//    implementation 'org.kie:kie-api:8.36.0.Final'

    implementation 'mysql:mysql-connector-java:8.0.32'
    implementation 'org.modelmapper:modelmapper:3.1.1'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'ch.qos.logback:logback-classic:1.4.7'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'com.h2database:h2'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit;'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.reflections:reflections:0.10.2'
    testImplementation 'org.droolsassert:droolsassert:3.0.11-drools8'

    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"


}


dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
        mavenBom ext.mavenBom
    }
}

springBoot {
    buildInfo()
}

test {

    String itags = System.getProperty("includeTests") ? System.getProperty("includeTests") : 'regression'
    String etags = System.getProperty("excludeTests") ? System.getProperty("excludeTests") : 'integration'

    environment 'SPRING_PROFILES_ACTIVE', 'test'
    outputs.dir snippetsDir


    useJUnitPlatform {
        includeTags itags
        excludeTags etags
    }
    jacoco {
        excludes = ['org.drools.*']
    }
    finalizedBy jacocoTestReport
}

asciidoctor {
    configurations "asciidoctorExt"
    inputs.dir snippetsDir
    dependsOn test
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}") {
        into 'src/main/resources/static'
    }
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            excludes = ['dk.pekilidi.dod.character.model.*']
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
        rule {
            element = 'CLASS'
            excludes = ['dk.pekilidi.dod.character.model.*']
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
    }
}
