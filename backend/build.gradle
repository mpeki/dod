apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'org.asciidoctor.jvm.convert'
apply plugin: 'com.gorylenko.gradle-git-properties'

apply plugin: 'org.openrewrite.rewrite'

group 'dk.dodgame'

java {
    sourceCompatibility = JavaVersion.VERSION_21
}


configurations {
    asciidoctorExt
}

dependencies {

    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    implementation libs.bundles.boot.starters

    // https://mvnrepository.com/artifact/io.awspring.cloud/spring-cloud-aws-starter-secrets-manager
//    implementation 'io.awspring.cloud:spring-cloud-aws-starter-secrets-manager:3.3.1'

    implementation 'org.keycloak:keycloak-core:26.3.3'

    implementation libs.bundles.database

    implementation platform(libs.drools.bom)
	implementation libs.bundles.drools
    implementation libs.modelmapper
    implementation libs.guava

    implementation libs.spring.retry
    implementation libs.bundles.logging

    compileOnly libs.lombok
    annotationProcessor libs.lombok
    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok

	testRuntimeOnly libs.bundles.test.runtime

    testImplementation(libs.spring.boot.starter.test) {
        exclude group: 'junit', module: 'junit'
    }

    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    testImplementation(libs.bundles.test) {
		exclude group: 'org.yaml', module: 'snakeyaml'
	}

    developmentOnly libs.bundles.tools

	rewrite(platform("org.openrewrite.recipe:rewrite-recipe-bom:latest.release"))
	rewrite("io.moderne.recipe:rewrite-spring:0.13.0")

}

rewrite {
	activeRecipe('io.moderne.java.spring.boot3.UpgradeSpringBoot_3_5')
	setExportDatatables(true)
}

//dependencyManagement {
//    imports {
//        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
//        mavenBom ext.mavenBom
//    }
//}

gradle.taskGraph.whenReady { taskGraph ->
    println 'Tasks to be executed:'
    taskGraph.allTasks.each { task ->
        println task.path
    }
}

bootRun {
    jvmArgs=["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"]
}

springBoot {
    buildInfo()
}

processResources {
    eachFile {
        if (it.name.endsWith('.txt')) {
            expand(version: version, buildTime: new Date().format('yyyy-MM-dd HH:mm:ss'))
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-Xlint:unchecked']
}

task createSnippetsDir {
    doLast {
        file("build/generated-snippets").mkdirs()
    }
}

test {

    dependsOn createSnippetsDir

    String itags = System.getProperty("runTestTags") ? System.getProperty("runTestTags") : "regression"
    String etags = System.getProperty("excludeTestTags") ? System.getProperty("excludeTestTags") : "none()"

    environment 'SPRING_PROFILES_ACTIVE', 'test'
    outputs.dir snippetsDir

    useJUnitPlatform {
        includeTags itags
        excludeTags etags
    }

    jacoco {
        excludes = ['org.drools.*']
    }
    finalizedBy jacocoTestReport
}


asciidoctor {
    inputs.dir snippetsDir
    outputDir = file('build/classes/java/main/static')
    configurations "asciidoctorExt"
    dependsOn test
}

jar {
    dependsOn asciidoctor
}

bootJar {
    dependsOn jar
}

resolveMainClassName {
    dependsOn asciidoctor
}

jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {
    dependsOn asciidoctor
    reports {
        xml.required = true
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            excludes = ['dk.dodgame.domain.character.model.*']
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
        rule {
            element = 'CLASS'
            excludes = ['dk.dodgame.domain.character.model.*']
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
    }
}

gitProperties {
	//Tell git properties to use the root project directory
	dotGitDirectory = project.rootProject.layout.projectDirectory.dir(".git")
}
