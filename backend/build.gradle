apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'org.asciidoctor.jvm.convert'
apply plugin: "com.gorylenko.gradle-git-properties"

group 'dk.dodgame'
java {
    sourceCompatibility = JavaVersion.VERSION_21
}

configurations {
    asciidoctorExt
}

dependencies {

    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'io.hypersistence:hypersistence-utils-hibernate-60:3.6.0'
    implementation 'org.springframework.boot:spring-boot-starter-logging'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    // https://mvnrepository.com/artifact/io.awspring.cloud/spring-cloud-aws-starter-secrets-manager
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-secrets-manager:3.1.1'

    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
//    implementation 'org.keycloak:keycloak-policy-enforcer:22.0.1'
    implementation 'org.keycloak:keycloak-core:22.0.5'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.liquibase:liquibase-core'

    implementation "org.drools:drools-engine:${droolsVersion}"
    implementation "org.drools:drools-mvel:${droolsVersion}"

    implementation 'mysql:mysql-connector-java:8.0.33'
    implementation 'org.modelmapper:modelmapper:3.2.0'
    implementation 'com.google.guava:guava:32.1.3-jre'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.retry:spring-retry:2.0.4'
    implementation 'ch.qos.logback:logback-classic:1.5.6'
    implementation 'ch.qos.logback:logback-core:1.5.6'

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testImplementation("org.junit.jupiter:junit-jupiter:5.10.1")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    testImplementation 'com.h2database:h2'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit;'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.reflections:reflections:0.10.2'
    //https://github.com/droolsassert/droolsassert
    testImplementation 'org.droolsassert:droolsassert:3.1.6'

    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"

    testImplementation "org.keycloak:keycloak-test-helper:25.0.0"
    testImplementation "org.keycloak:keycloak-admin-client:25.0.5"
    testImplementation "org.springframework.security:spring-security-test"

    developmentOnly "org.springframework.boot:spring-boot-devtools"

}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
        mavenBom ext.mavenBom
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    println 'Tasks to be executed:'
    taskGraph.allTasks.each { task ->
        println task.path
    }
}

bootRun {
    jvmArgs=["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"]
}

springBoot {
    buildInfo()
}

processResources {
    eachFile {
        if (it.name.endsWith('.txt')) {
            expand(version: version, buildTime: new Date().format('yyyy-MM-dd HH:mm:ss'))
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-Xlint:unchecked']
}

task createSnippetsDir {
    doLast {
        file("build/generated-snippets").mkdirs()
    }
}

test {

    dependsOn createSnippetsDir

    String itags = System.getProperty("includeTests") ? System.getProperty("includeTests") : "regression"
    String etags = System.getProperty("excludeTests") ? System.getProperty("excludeTests") : "none()"

    environment 'SPRING_PROFILES_ACTIVE', 'test'
    outputs.dir snippetsDir

    useJUnitPlatform {
        includeTags itags
        excludeTags etags
    }

    jacoco {
        excludes = ['org.drools.*']
    }
    finalizedBy jacocoTestReport
}


asciidoctor {
    inputs.dir snippetsDir
    outputDir = file('build/classes/java/main/static')
    configurations "asciidoctorExt"
    dependsOn test
}

jar {
    dependsOn asciidoctor
}

bootJar {
    dependsOn jar
}

resolveMainClassName {
    dependsOn asciidoctor
}

jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {
    dependsOn asciidoctor
    reports {
        xml.required = true
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            excludes = ['dk.dodgame.domain.character.model.*']
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
        rule {
            element = 'CLASS'
            excludes = ['dk.dodgame.domain.character.model.*']
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
    }
}
