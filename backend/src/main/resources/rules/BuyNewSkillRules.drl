import dk.pekilidi.dod.changerequest.model.ChangeStatusLabel
import dk.pekilidi.dod.changerequest.model.ChangeStatus
import dk.pekilidi.dod.changerequest.model.ChangeRequest
import dk.pekilidi.dod.changerequest.model.ChangeType
import dk.pekilidi.dod.data.CharacterDTO
import dk.pekilidi.dod.skill.SkillService
import dk.pekilidi.dod.data.SkillDTO
import dk.pekilidi.dod.skill.SkillKey

global SkillService skillService;
global SkillDTO skill;
global Integer skillCost;

rule "Validate change request"
  ruleflow-group "new-skill"
  salience 100
  no-loop
  when
    changeRequest : ChangeRequest( changeType == ChangeType.NEW_SKILL && status == ChangeStatus.PENDING );
    character : CharacterDTO();
  then
    skill = skillService.findSkillByKey((SkillKey) changeRequest.getChangeKey());
    drools.getKieRuntime().setGlobal("skill", skill);
    skillCost = SkillService.calculateNewSkillPrice(character, skill, (Integer) changeRequest.getModifier());
    drools.getKieRuntime().setGlobal("skillCost", skillCost);
    System.out.println("skill cost: " + skillCost + "  skillpoints: " + character.getBaseSkillPoints());
    if( character.getBaseSkillPoints() < skillCost ){
      changeRequest.setStatusLabel(ChangeStatusLabel.INSUFFICIENT_SKILL_POINTS);
      changeRequest.setStatus(ChangeStatus.REJECTED);
    }
    else if ( character.getSkills().containsKey(changeRequest.getChangeKey())) {
      changeRequest.setStatusLabel(ChangeStatusLabel.SKILL_ALREADY_BOUGHT);
      changeRequest.setStatus(ChangeStatus.REJECTED);
    }
    update(changeRequest)
end;


rule "Add skill"
  salience 50
  ruleflow-group "new-skill"
  no-loop
  when
    character : CharacterDTO();
    changeRequest : ChangeRequest( changeType == ChangeType.NEW_SKILL && status == ChangeStatus.PENDING );
  then
    if( skill != null && skillCost != null ){
      skill.setFv((Integer) changeRequest.getModifier());
      character.setBaseSkillPoints(character.getBaseSkillPoints() - skillCost);
      character.addSkill(skill);
      changeRequest.setStatus(ChangeStatus.APPROVED);
      changeRequest.setStatusLabel(ChangeStatusLabel.OK_SKILL_BOUGHT);
    } else {
      changeRequest.setStatusLabel(ChangeStatusLabel.CHANGE_REJECTED_UNKNOWN_REASON);
      changeRequest.setStatus(ChangeStatus.REJECTED);
    }
    update(changeRequest)
end;

