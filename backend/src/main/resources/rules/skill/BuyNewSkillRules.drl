import dk.pekilidi.dod.changerequest.model.ChangeStatusLabel
import dk.pekilidi.dod.changerequest.model.ChangeStatus
import dk.pekilidi.dod.changerequest.model.ChangeRequest
import dk.pekilidi.dod.changerequest.model.ChangeType
import dk.pekilidi.dod.character.model.CharacterState
import dk.pekilidi.dod.data.CharacterDTO
import dk.pekilidi.dod.skill.SkillService
import dk.pekilidi.dod.data.SkillDTO
import dk.pekilidi.dod.skill.SkillKey
import dk.pekilidi.dod.skill.SkillNotFoundException
import dk.pekilidi.dod.items.ItemKey
import dk.pekilidi.dod.util.Dice

global SkillService skillService;
global SkillDTO skill;
global Integer skillCost;

rule "Validate character state"
  ruleflow-group "new-skill"
  salience 100
  no-loop
  when
    changeRequest : ChangeRequest( changeType == ChangeType.NEW_SKILL && status == ChangeStatus.PENDING )
    character : CharacterDTO( state != CharacterState.INIT_COMPLETE)
  then
    changeRequest.setStatusLabel(ChangeStatusLabel.WRONG_CHARACTER_STATE);
    changeRequest.setStatus(ChangeStatus.REJECTED);
    update(changeRequest)
end;

rule "Validate change request"
  ruleflow-group "new-skill"
  salience 100
  no-loop
  when
    changeRequest : ChangeRequest( changeType == ChangeType.NEW_SKILL && status == ChangeStatus.PENDING )
    character : CharacterDTO( state == CharacterState.INIT_COMPLETE )
  then
    String skillKey = ((SkillKey) changeRequest.getChangeKey()).getKeyValue();
    try {
      skill = skillService.findSkillByKey(skillKey);
    } catch (SkillNotFoundException e) {
      changeRequest.setStatusLabel(ChangeStatusLabel.SKILL_DOES_NOT_EXIST);
      changeRequest.setStatus(ChangeStatus.REJECTED);
    }
    if(skill != null){
      drools.getKieRuntime().setGlobal("skill", skill);
      skillCost = SkillService.calculateNewSkillPrice(character, skill, (Integer) changeRequest.getModifier());
      drools.getKieRuntime().setGlobal("skillCost", skillCost);
      if( character.getBaseSkillPoints() < skillCost ){
        changeRequest.setStatusLabel(ChangeStatusLabel.INSUFFICIENT_SKILL_POINTS);
        changeRequest.setStatus(ChangeStatus.REJECTED);
      }
      if ( character.getSkills().containsKey(skillKey)) {
        changeRequest.setStatusLabel(ChangeStatusLabel.SKILL_ALREADY_BOUGHT);
        changeRequest.setStatus(ChangeStatus.REJECTED);
      }
    }
    if( changeRequest.getStatus() == ChangeStatus.PENDING ){
      changeRequest.setStatus(ChangeStatus.VALIDATED);
    }
    update(changeRequest)
end;

rule "Add Racial Modifier"
  ruleflow-group "new-skill"
  salience 80
  no-loop
  when
    character : CharacterDTO( state == CharacterState.INIT_COMPLETE )
    changeRequest : ChangeRequest( changeType == ChangeType.NEW_SKILL && status == ChangeStatus.VALIDATED )
  then
    switch(character.getRace().getName()){
      case "dwarf":
        if( skill.getKey().getKeyValue().equals("fst") ){
          int mod = (Integer) changeRequest.getModifier();
          changeRequest.setModifier( mod + Dice.roll("1t3") );
        }
    }
    update(changeRequest)
end;


rule "Add skill"
  salience 50
  ruleflow-group "new-skill"
  no-loop
  when
    character : CharacterDTO( state == CharacterState.INIT_COMPLETE )
    changeRequest : ChangeRequest( changeType == ChangeType.NEW_SKILL && status == ChangeStatus.VALIDATED )
  then
    skillCost = (Integer) drools.getKieRuntime().getGlobal("skillCost");
    skill = (SkillDTO) drools.getKieRuntime().getGlobal("skill");
    if( skill != null && skillCost != null ){
      skill.setFv((Integer) changeRequest.getModifier());
      skill.setItemKey(changeRequest.getSecondaryChangeKey() != null ? ((ItemKey) changeRequest.getSecondaryChangeKey().getChangeKey()) : null);
      skill.setSkillPointsSpent(skillCost);
      character.setBaseSkillPoints(character.getBaseSkillPoints() - skillCost);
      character.addSkill(skill);
      changeRequest.setStatus(ChangeStatus.APPROVED);
      changeRequest.setStatusLabel(ChangeStatusLabel.OK_SKILL_BOUGHT);
    } else {
      changeRequest.setStatusLabel(ChangeStatusLabel.CHANGE_REJECTED_UNKNOWN_REASON);
      changeRequest.setStatus(ChangeStatus.REJECTED);
    }
    drools.getKieRuntime().setGlobal("skillCost", null);
    drools.getKieRuntime().setGlobal("skill", null);
    update(changeRequest)
end;

