import dk.pekilidi.dod.changerequest.model.ChangeStatusLabel
import dk.pekilidi.dod.changerequest.model.ChangeStatus
import dk.pekilidi.dod.changerequest.model.ChangeRequest
import dk.pekilidi.dod.changerequest.model.ChangeType
import dk.pekilidi.dod.character.model.CharacterState
import dk.pekilidi.dod.data.CharacterDTO
import dk.pekilidi.dod.skill.SkillService
import dk.pekilidi.dod.data.SkillDTO
import dk.pekilidi.dod.skill.SkillKey
import dk.pekilidi.dod.skill.SkillNotFoundException
import dk.pekilidi.dod.items.ItemKey
import dk.pekilidi.dod.data.CharacterSkillDTO
import dk.pekilidi.dod.character.model.BaseTraitName

global SkillService skillService;

rule "Validate character state - remove skill"
  ruleflow-group "remove-skill"
  salience 100
  no-loop
  when
    changeRequest : ChangeRequest( changeType == ChangeType.REMOVE_SKILL && status == ChangeStatus.PENDING )
    character : CharacterDTO( state != CharacterState.INIT_COMPLETE)
  then
    changeRequest.setStatusLabel(ChangeStatusLabel.WRONG_CHARACTER_STATE);
    changeRequest.setStatus(ChangeStatus.REJECTED);
    update(changeRequest)
end;

rule "Validate change request - remove skill"
  ruleflow-group "remove-skill"
  salience 100
  no-loop
  when
    changeRequest : ChangeRequest( changeType == ChangeType.REMOVE_SKILL && status == ChangeStatus.PENDING )
    character : CharacterDTO( state == CharacterState.INIT_COMPLETE )
  then
    String skillKey = ((SkillKey) changeRequest.getChangeKey()).getKeyValue();
    if( !character.getSkills().containsKey(skillKey) ){
      changeRequest.setStatusLabel(ChangeStatusLabel.SKILL_NOT_BOUGHT);
      changeRequest.setStatus(ChangeStatus.REJECTED);
    }
    if (changeRequest.getStatus() == ChangeStatus.PENDING){
      changeRequest.setStatus(ChangeStatus.VALIDATED);
    }
    update(changeRequest)
end;

rule "Recalculate Dodge Skill - remove primary weapon skill"
  ruleflow-group "remove-skill"
  salience 80
  no-loop
  when
    character : CharacterDTO( state == CharacterState.INIT_COMPLETE )
    changeRequest : ChangeRequest( changeType == ChangeType.REMOVE_SKILL && status == ChangeStatus.VALIDATED )
  then
    String skillKey = ((SkillKey) changeRequest.getChangeKey()).getKeyValue();
    if(skillKey.equalsIgnoreCase("primary.weapon")){
        CharacterSkillDTO handToHandSkill = character.getSkills().get("hand.to.hand");
        CharacterSkillDTO dodgeSkill = character.getSkills().get("dodge");
        if(dodgeSkill != null){
          character.updateFv("dodge", Math.ceilDiv(character.getBaseTraitValue(BaseTraitName.DEXTERITY) + handToHandSkill.getFv(), 2));
        }
    }
end;

rule "Remove skill"
  salience 50
  ruleflow-group "remove-skill"
  no-loop
  when
    character : CharacterDTO( state == CharacterState.INIT_COMPLETE )
    changeRequest : ChangeRequest( changeType == ChangeType.REMOVE_SKILL && status == ChangeStatus.VALIDATED )
  then
    String skillKey = ((SkillKey) changeRequest.getChangeKey()).getKeyValue();
    CharacterSkillDTO skillToRemove = character.getSkills().get(skillKey);
    character.setBaseSkillPoints(character.getBaseSkillPoints() + skillToRemove.getSkillPointsSpent());
    character.removeSkill(skillKey);
    changeRequest.setStatus(ChangeStatus.APPROVED);
    changeRequest.setStatusLabel(ChangeStatusLabel.OK_SKILL_REMOVED);
    update(changeRequest)
end;
