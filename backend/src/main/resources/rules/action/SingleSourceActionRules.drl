import dk.dodgame.data.CharacterDTO
import dk.dodgame.domain.character.model.CharacterState
import dk.dodgame.util.Dice
import dk.dodgame.domain.action.model.SkillTrainingAction
import dk.dodgame.domain.action.model.Type
import dk.dodgame.domain.action.model.ActionResult
import dk.dodgame.domain.skill.SkillService
import dk.dodgame.domain.skill.SkillNotFoundException
import dk.dodgame.data.SkillDTO
import dk.dodgame.domain.changerequest.model.ChangeStatus
import dk.dodgame.domain.character.model.BaseTraitName
import java.time.LocalDateTime
import dk.dodgame.domain.skill.model.Category
import dk.dodgame.data.CharacterSkillDTO
import dk.dodgame.domain.character.model.BaseTraitName
import dk.dodgame.domain.action.model.ActionResult
import dk.dodgame.data.CharacterSkillDTO
import dk.dodgame.domain.action.model.ActionResult
import dk.dodgame.domain.character.model.BaseTraitName
import dk.dodgame.util.rules.SkillRules
import dk.dodgame.domain.action.model.ActionResultDescription

rule "Validate Action - Character is not ready to play"
  ruleflow-group "training-action"
  salience 100
  when
    ssAction : SkillTrainingAction( type == Type.SKILL_TRAINING && ssAction.actionResult == null )
    character : CharacterDTO( state != CharacterState.READY_TO_PLAY ) from ssAction.actor
  then
    ssAction.setActionResult(ActionResult.INVALID_ACTION);
    ssAction.setResultDescription(ActionResultDescription.builder().actionResult("Character is not ready to play - must be in READY_TO_PLAY state, was " + character.getState()).build());
    update(ssAction);
end;

rule "Validate Action - Skill does not exist!"
  ruleflow-group "training-action"
  salience 100
  when
    ssAction : SkillTrainingAction( type == Type.SKILL_TRAINING && ssAction.skill == null && ssAction.actionResult == null )
    character : CharacterDTO( state == CharacterState.READY_TO_PLAY ) from ssAction.actor
  then
    ssAction.setActionResult(ActionResult.INVALID_ACTION);
    ssAction.setResultDescription(ActionResultDescription.builder().actionResult("Skill does not exist: " + ssAction.getSkillKey() + " how did you do that?").build());
    update(ssAction);
end;

rule "Get result from training action (single actor no target)"
  ruleflow-group "training-action"
  salience 90
  when
    ssAction : SkillTrainingAction( type == Type.SKILL_TRAINING && ssAction.actionResult == null )
    character : CharacterDTO( state == CharacterState.READY_TO_PLAY ) from ssAction.actor
    roll : Integer() from Dice.roll("1t20")
  then
    String skillKey = ssAction.getSkillKey();
    CharacterSkillDTO characterSkill = character.getSkills().get(skillKey);

    if(characterSkill != null){
      int fv = characterSkill.getFv();
//      characterSkill.setCategory(ssAction.getSkill().getCategory());
      characterSkill.setLastUsed(LocalDateTime.now());
      ssAction.setActionResult(SkillRules.testSkill(characterSkill, roll, ssAction.getDifficulty()));
      ssAction.setResultDescription(ActionResultDescription.builder().actionResult("Rolled ["+roll+"] when testing known skill: " + skillKey + " - with fv: " + fv ).build());
    } else {
        if(ssAction.getSkill().getBaseChance() == BaseTraitName.NONE) {
          ssAction.setActionResult(SkillRules.testSkill(-1, roll, ssAction.getDifficulty()));
          ssAction.setResultDescription(ActionResultDescription.builder().actionResult("Rolled ["+roll+"] when testing skill unknown to character (no base chance): " + skillKey).build() );
        } else {
          int baseChance = character.getBaseTraits().get(ssAction.getSkill().getBaseChance()).getGroupValue();
          ssAction.setActionResult(SkillRules.testSkill(baseChance, roll, ssAction.getDifficulty()));
          ssAction.setResultDescription(ActionResultDescription.builder().actionResult("Rolled ["+roll+"] when testing skill unknown to character (with base chance): " + skillKey + " - with fv: " + baseChance).build() );
        }
    }
    update(ssAction);
end;
