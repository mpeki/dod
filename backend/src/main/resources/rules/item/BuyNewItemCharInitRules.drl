import java.util.stream.Collectors
import java.util.Set
import dk.dodgame.domain.changerequest.model.ChangeStatusLabel
import dk.dodgame.domain.changerequest.model.ChangeStatus
import dk.dodgame.domain.changerequest.model.ChangeRequest
import dk.dodgame.domain.changerequest.model.ChangeType
import dk.dodgame.domain.character.model.CharacterState
import dk.dodgame.data.CharacterDTO
import dk.dodgame.data.CharacterItemDTO
import dk.dodgame.data.ItemDTO
import dk.dodgame.domain.item.ItemService
import dk.dodgame.domain.item.ItemKey
import dk.dodgame.domain.item.model.Coin

import dk.dodgame.domain.item.ItemNotFoundException
import dk.dodgame.data.PaymentDTO
import dk.dodgame.domain.changerequest.model.ChangeItem
import java.util.List
import java.util.ArrayList
import dk.dodgame.util.item.PaymentException
import dk.dodgame.util.item.PaymentHandler
import dk.dodgame.util.rules.ArmorRules
import dk.dodgame.domain.character.model.BaseTraitName

global ItemService itemService;
global CharacterItemDTO charItem;
global ItemDTO storeItem;
global PaymentDTO payment;

rule "Validate character state (item)"
  ruleflow-group "new-item"
  salience 100
  no-loop
  when
    changeRequest : ChangeRequest( changeType == ChangeType.NEW_ITEM_INIT_COMPLETE && status == ChangeStatus.PENDING )
    character : CharacterDTO( state != CharacterState.INIT_COMPLETE)
  then
    changeRequest.setStatusLabel(ChangeStatusLabel.WRONG_CHARACTER_STATE);
    changeRequest.setStatus(ChangeStatus.REJECTED);
    update(changeRequest)
end;

rule "Validate item change request"
  ruleflow-group "new-item"
  salience 100
  no-loop
  when
    changeRequest : ChangeRequest( changeType == ChangeType.NEW_ITEM_INIT_COMPLETE && status == ChangeStatus.PENDING )
    character : CharacterDTO( state == CharacterState.INIT_COMPLETE )
  then
    String itemKey = ((ItemKey) changeRequest.getChangeKey()).getKeyValue();
    try {
      storeItem = itemService.findItemByKey(itemKey);
    } catch (ItemNotFoundException e) {
      changeRequest.setStatusLabel(ChangeStatusLabel.ITEM_DOES_NOT_EXIST);
      changeRequest.setStatus(ChangeStatus.REJECTED);
    }
    if(storeItem != null){
      drools.getKieRuntime().setGlobal("storeItem", storeItem);
    }
    update(changeRequest)
end;

rule "Check Payment"
  salience 60
  ruleflow-group "new-item"
  no-loop
  when
    character : CharacterDTO( state == CharacterState.INIT_COMPLETE )
    changeRequest : ChangeRequest( changeType == ChangeType.NEW_ITEM_INIT_COMPLETE && status == ChangeStatus.PENDING )
   then
    if( changeRequest.getSecondaryChangeKey() != null && changeRequest.getSecondaryChangeKey().getChangeItem() != null) {
      ChangeItem changeItem = changeRequest.getSecondaryChangeKey().getChangeItem();
        if( changeItem instanceof PaymentDTO ) {
          PaymentDTO paymentItem = PaymentHandler.setPayingParty((PaymentDTO) changeItem, character);

          storeItem = (ItemDTO) drools.getKieRuntime().getGlobal("storeItem");
          int numItems = Integer.parseInt(changeRequest.getModifier().toString());
          paymentItem = PaymentHandler.setPaymentItems(paymentItem, storeItem, numItems);

          drools.getKieRuntime().setGlobal("payment", paymentItem);
        } else {
          changeRequest.setStatusLabel(ChangeStatusLabel.NO_PAYMENT_RECEIVED);
          changeRequest.setStatus(ChangeStatus.REJECTED);
        }
    }
end;

rule "Add Item"
  salience 50
  ruleflow-group "new-item"
  no-loop
  when
    character : CharacterDTO( state == CharacterState.INIT_COMPLETE )
    changeRequest : ChangeRequest( changeType == ChangeType.NEW_ITEM_INIT_COMPLETE && status == ChangeStatus.PENDING )
  then
    payment = (PaymentDTO) drools.getKieRuntime().getGlobal("payment");
    if( payment != null ){
      try {
        payment = PaymentHandler.handleCharacterCreationPayment(payment);
        if(payment.getStatus() == ChangeStatus.APPROVED){
          changeRequest.setStatus(ChangeStatus.APPROVED);
          changeRequest.setStatusLabel(ChangeStatusLabel.OK_ITEM_BOUGHT);
          character = payment.getPayingParty();
        } else {
          changeRequest.setStatus(ChangeStatus.REJECTED);
          changeRequest.setStatusLabel(payment.getStatusLabel());
        }
      } catch (PaymentException e) {
        changeRequest.setStatusLabel(ChangeStatusLabel.PAYMENT_ERROR);
        changeRequest.setStatus(ChangeStatus.REJECTED);
      }
    } else {
      changeRequest.setStatusLabel(ChangeStatusLabel.CHANGE_REJECTED_UNKNOWN_REASON);
      changeRequest.setStatus(ChangeStatus.REJECTED);
    }
    drools.getKieRuntime().setGlobal("payment", null);
    drools.getKieRuntime().setGlobal("storeItem", null);
    update(changeRequest)
end;

