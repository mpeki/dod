import java.util.stream.Collectors
import java.util.Set
import dk.dodgame.domain.changerequest.model.ChangeStatusLabel
import dk.dodgame.domain.changerequest.model.ChangeStatus
import dk.dodgame.domain.changerequest.model.ChangeRequest
import dk.dodgame.domain.changerequest.model.ChangeType
import dk.dodgame.domain.character.model.CharacterState
import dk.dodgame.data.CharacterDTO
import dk.dodgame.data.CharacterItemDTO
import dk.dodgame.data.ItemDTO
import dk.dodgame.domain.item.ItemService
import dk.dodgame.domain.item.ItemKey
import dk.dodgame.domain.item.model.Coin

import dk.dodgame.domain.item.ItemNotFoundException

global ItemService itemService;
global CharacterItemDTO charItem;
global ItemDTO storeItem;
global Integer itemCost;

rule "Validate character state (item)"
  ruleflow-group "new-item"
  salience 100
  no-loop
  when
    changeRequest : ChangeRequest( changeType == ChangeType.NEW_ITEM_INIT_COMPLETE && status == ChangeStatus.PENDING )
    character : CharacterDTO( state != CharacterState.INIT_COMPLETE)
  then
    changeRequest.setStatusLabel(ChangeStatusLabel.WRONG_CHARACTER_STATE);
    changeRequest.setStatus(ChangeStatus.REJECTED);
    update(changeRequest)
end;

rule "Validate item change request"
  ruleflow-group "new-item"
  salience 100
  no-loop
  when
    changeRequest : ChangeRequest( changeType == ChangeType.NEW_ITEM_INIT_COMPLETE && status == ChangeStatus.PENDING )
    character : CharacterDTO( state == CharacterState.INIT_COMPLETE )
  then
    String itemKey = ((ItemKey) changeRequest.getChangeKey()).getKeyValue();
    try {
      storeItem = itemService.findItemByKey(itemKey);
    } catch (ItemNotFoundException e) {
      changeRequest.setStatusLabel(ChangeStatusLabel.ITEM_DOES_NOT_EXIST);
      changeRequest.setStatus(ChangeStatus.REJECTED);
    }
    if(storeItem != null){
      drools.getKieRuntime().setGlobal("storeItem", storeItem);
      itemCost = storeItem.getPrice() * Integer.parseInt(changeRequest.getModifier().toString());
      drools.getKieRuntime().setGlobal("itemCost", itemCost);
      if( character.getAmountOf(Coin.SILVER_PIECE) < itemCost ){
        changeRequest.setStatusLabel(ChangeStatusLabel.INSUFFICIENT_FUNDS);
        changeRequest.setStatus(ChangeStatus.REJECTED);
      }
    }
    update(changeRequest)
end;


rule "Add Item"
  salience 50
  ruleflow-group "new-item"
  no-loop
  when
    character : CharacterDTO( state == CharacterState.INIT_COMPLETE )
    changeRequest : ChangeRequest( changeType == ChangeType.NEW_ITEM_INIT_COMPLETE && status == ChangeStatus.PENDING )
  then
    itemCost = (Integer) drools.getKieRuntime().getGlobal("itemCost");
    storeItem = (ItemDTO) drools.getKieRuntime().getGlobal("storeItem");
    if( storeItem != null && itemCost != null ){
      character.subtractCoins(itemCost, Coin.SILVER_PIECE);
      character.addItem(CharacterItemDTO.builder().item(storeItem).build());
      changeRequest.setStatus(ChangeStatus.APPROVED);
      changeRequest.setStatusLabel(ChangeStatusLabel.OK_ITEM_BOUGHT);
    } else {
      changeRequest.setStatusLabel(ChangeStatusLabel.CHANGE_REJECTED_UNKNOWN_REASON);
      changeRequest.setStatus(ChangeStatus.REJECTED);
    }
    drools.getKieRuntime().setGlobal("itemCost", null);
    drools.getKieRuntime().setGlobal("storeItem", null);
    update(changeRequest)
end;

